package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    public JoinPredicate pred;
    public DbIterator[] iter_children;
    public Tuple t1;
    public Tuple t2;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.pred = p;
        this.iter_children = new DbIterator[2];
        iter_children[0] = child1;
        iter_children[1] = child2;
        this.t1 = null;
        this.t2 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return iter_children[0].getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
    	return iter_children[1].getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(iter_children[0].getTupleDesc(), iter_children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        iter_children[0].open();
        iter_children[1].open();
        super.open();
    }

    public void close() {
    	iter_children[0].close();
        iter_children[1].close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        iter_children[0].rewind();
    	iter_children[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	while (true) {
        	if (t1 == null) {
        		if (iter_children[0].hasNext()) {
        			t1 = iter_children[0].next();
        			iter_children[1].rewind();
        		} else {
        			return null;
        		}
        	}
        	while (iter_children[1].hasNext()) {
        		t2 = iter_children[1].next();
        		if (pred.filter(t1, t2)) {
        			Tuple tNew = new Tuple(getTupleDesc());
        			int idx = 0;
        			for (int i = 0; i < t1.getTupleDesc().numFields(); i++) {
        				tNew.fields[idx] = t1.getField(i);
        				idx++;
        			}
        			for (int j = 0; j < t2.getTupleDesc().numFields(); j++) {
        				tNew.fields[idx] = t2.getField(j);
        				idx++;
        			}
        			return tNew;
        		}
        	}
        	t1 = null;
        }
    }

    @Override
    public DbIterator[] getChildren() {
        return iter_children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length == 2) {
        	iter_children = children;
        }
    }

}
