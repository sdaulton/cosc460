Report for Lab 3
----------------

After you complete lab 5, please answer the following questions.

1. What is your name?  If you work with a partner, be sure to write both of your names.

	Sam Daulton

2. What did you think of this assignment?

	I really liked implementing a lock manager from scratch.  I appreciated not having any skeleton methods and having to figure out the best way to implement the lock manager.  

3. What was the hardest part of this assignment?

	The hardest part was probably just adapting my original LockManager to included shared lock capability.  I ended up essentially trashing my entire first LockManager and writing a new one with a completely different structure.  Also, adding timeouts was tricky as I had several successful runs of the unit tests, only to find out that I was just getting lucky, and subsequently failed a few tests.  Now, everything works though.

4. Describe any missing or incomplete elements of your code.

	To my knowledge all the code working correctly

5. Roughly how long did you spend working on this lab?

	Really hard to say, as this lab has been like a two-week project.  A LONG time. Probably 25+ hours.

6. Describe your lock manager implementation.  Here are some specific questions to answer:

a) Where is your lock manager located?  (I.e., is it a separate class, part of BufferPool, etc.)

	My lock manager is in its own class, LockManager.java.

b) What specific information do you store and how do you store it?  

	Within my LockManager class, I defined two static classes to help store important information: 
		LockEntry and LockNode.  I will describe the data structures that LockManager employs, which will make those two classes' purposes obivous.
	There are two main data structures in my LockManager: 
		lockTable: a HashMap mapping PageId to LockEntry
		abort_list: a LinkedList of TransactionIds that should be aborted if they run (because of timeouts)
	A LockEntry has the following attributes:
		a PageId
		a boolean indicating the type of lock
		a LinkedList of TransactionIds for transactions that currently hold a lock on the page
		and a LinkedList (queue) of LockNodes, one for each transaction waiting for the lock for the page
	A LockNode has the following attributes:
		a PageId
		a TransactionId
		a boolean indicating the type of lock.

	In BufferPool, I also have several data structures:
		evict_list - a LinkedList of PageId for all pages currently in the BufferPool.  The evict list is order based on LRU.
		dirt_check_list - a LinkedList of Boolean objects, one for each page in the BufferPool, indicating if the page is dirty.
		tid_locks -  a Hashmap TransactionId --> LinkedList of PageIds: for each current transaction, this maps to a list of pageIds that the txn is either currently waiting for a lock for or currently holds a lock for.
		tid_time - a Hashmap TranactionId --> Long Object: the Long Object is the time that the transaction began.  I have implemented timeouts such that a transaction times out after running for 10 seconds

c) Briefly describe what happens when a new transaction requests a page.  I.e., walk thru how the lock manager decides whether or not to grant the request.  Your description should reference the data structures that describe in part (b).

	A new txn requests a page in the BufferPool.getPage() via a call to LockManager.acquirePageLock().  AcquirePageLock gets the lock for the LockManager and then calls requestLock().  In requestLock() fetchs the LockEntry for the page from the lockTable (HashMap).  If lock does not exist yet (the lock entry is null), a new LockEntry is created, put in the lockTable, and the txn is given the lock, and requestLock returns. Otherwise the LockEntry exists.  First, we check if the txn already has a lock for the page.  If it does, we either return true that it has the lock it wants or the txn wants to upgrade.  If the txn wants an upgrade: if it is the only txn holding the lock, it is given the upgrade immeadiately. Otherwise if other txns are also currently holding the lock, we add a new LockNode to the front of the waiting queue representing the upgrade. 
	If the txn does not currently hold a lock on the page, we check the waiting queue.  If the waiting queue is not empty, we check if the txn is already waiting.  If it is already waiting, we simply update the request to reflect the maximum level lock requested (where Exclusive > shared).  If the txn is not waiting, granted is not empty we add a new LockNode to the end of the waiting queue.  Otherwise if there are currently not txns holding the lock and the waiting queue is empty, give the txn the lock.  	
	If the waiting queue is empty, but another lock is holding the page, if the lock is currently shared and the txn is requesting a shared lock, add the txn to the granted queue.  Otherwise add the txn to the waiting queue.

NOTE: whenever I say give the txn a lock, that means add the TransactionId to the LockEntry's LinkedList of granted txns, and update the boolean of the LockEntry to reflect the current lock type.
NOTE: whenever I say add the txn to the waiting queue, that means create a new LockNode initialized with the PageId, TransactionId, and boolean indicating lock type and add it to the end of the queue (waiting list) in the LockEntry for the page.

Now, put the LockEntry into the lockTable (hashmap) using the PageId as the key.

If the lock was awarded, return all the way back to the BufferPool (and implicitly release the lock for the LockManager).  If the lock was not awarded, enter the waitForLock method, where the transaction spins as it waits for the lock.
When a txn releases a page, the lock is given to the next txn in the waiting queue in the releasePageLock method or multiple txns if the type of lock requested is shared and there are multiple consecutive shared requests at the top of the waiting list.
 
d) Briefly explain how you manage locks when inserting a tuple into a HeapFile.  In particular, how do you acquire/release locks when looking for a page to insert.

	A txn acquires the lock for the BufferPool and then acquires shared locks to check if pages have any free slots.  If it finds a page with a free slot, it requests an upgrade for the lock for that page and then inserts the tuple.  If no page in the HeapFile has a free slot, the txn requests an upgrade for the last page of the Heapfile, thus no other txn can insert a new page to the Heapfile, since I mandate that a txn hold an exclusive lock for the current last page of the Heapfile.  The txn then creates a new blank page and adds it to the heapfile and immediately flushes the new page to disk.  Then the BufferPool gets the page from disk (which gets its lock from the LockManager), and the txn inserts the tuple, marks the page as dirty.  Then the txn releases the lock for the (now) penultimate page
